package com.mavin;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * This class implements a web crawler to retrieve stock information from Google search results.
 * It retrieves the stock's full name, price, low price, and high price from Google.
 * The retrieved information is then inserted into a MySQL database.
 */
public class Crawler1 implements Runnable {

    private String ticker;
    private String url = "jdbc:mysql://localhost:3306/stock";
    private String usernameSQL = "root";
    private String passwordSQL = "pass";
    private JDBC jdbc = new JDBC(url, usernameSQL, passwordSQL);

    /**
     * Constructs a new instance of the Crawler1 class with the specified stock ticker symbol.
     *
     * @param ticker the stock ticker symbol
     * @throws SQLException if a database access error occurs
     */
    public Crawler1(String ticker) throws SQLException {
        this.ticker = ticker;
    }

    @Override
    public void run() {
        stockInformation();
    }

    /**
     * Retrieves stock information from Google search results and inserts it into the database.
     */
    public void stockInformation() {
        String url = "https://www.google.com/search?q=" + this.ticker + " stock";

        Document document;
        List<String> stockInfo = new ArrayList<>();

        // CSS queries for retrieving specific information from Google search results
        String queryFullName = "div.PZPZlf.ssJ7i.B5dxMb"; // Full Name
        String queryPrice = "span.IsqQVc.NprOob.wT3VGc";  // Price
        String queryLowPrice = "div.PZPZlf[data-attrid=Low]"; // Low
        String queryHighPrice = "div.PZPZlf[data-attrid=High]"; // High

        try {
            document = Jsoup.connect(url).get();
            String fullName = document.select(queryFullName).text();
            String price = document.select(queryPrice).text();
            String lowPrice = document.select(queryLowPrice).text();
            String highPrice = document.select(queryHighPrice).text();

            insertData(ticker, fullName, price, lowPrice, highPrice);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Inserts stock information into the database.
     *
     * @param ticker    the stock ticker symbol
     * @param fullName  the full name of the stock
     * @param price     the current price of the stock
     * @param lowPrice  the lowest price of the stock
     * @param highPrice the highest price of the stock
     */
    private void insertData(String ticker, String fullName, String price, String lowPrice, String highPrice) {
        try (Connection connection = jdbc.getConnection()) {
            String sql = "INSERT INTO stock (symbol, type, date, ticker, high, low, price) VALUES (?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setString(1, ticker);
                preparedStatement.setString(2, marketStatus());
                preparedStatement.setDate(3, new java.sql.Date(getDate().getTime()));
                preparedStatement.setString(4, "ticker_value");

                if (!highPrice.isEmpty() && highPrice.matches("[-+]?\\d*\\.?\\d+")) {
                    preparedStatement.setBigDecimal(5, new BigDecimal(highPrice));
                } else {
                    preparedStatement.setNull(5, java.sql.Types.DECIMAL);
                }

                if (!lowPrice.isEmpty() && lowPrice.matches("[-+]?\\d*\\.?\\d+")) {
                    preparedStatement.setBigDecimal(6, new BigDecimal(lowPrice));
                } else {
                    preparedStatement.setNull(6, java.sql.Types.DECIMAL);
                }

                if (!price.isEmpty() && price.matches("[-+]?\\d*\\.?\\d+")) {
                    preparedStatement.setBigDecimal(7, new BigDecimal(price));
                } else {
                    preparedStatement.setNull(7, java.sql.Types.DECIMAL);
                }

                preparedStatement.executeUpdate();
            }

        } catch (SQLException e) {
            System.out.println("Duplicate entries");
        }
    }

    /**
     * Retrieves the current date.
     *
     * @return the current date
     */
    private Date getDate() {
        return new Date();
    }

    /**
     * Determines the market status based on the current day and time.
     *
     * @return "open" if the market is open, "closed" otherwise
     */
    private String marketStatus() {
        LocalTime currentTime = LocalTime.now();
        DayOfWeek currentDay = java.time.LocalDate.now().getDayOfWeek();

        if (currentDay != DayOfWeek.SATURDAY && currentDay != DayOfWeek.SUNDAY &&
                currentTime.isAfter(LocalTime.of(9, 30)) && currentTime.isBefore(LocalTime.of(16, 0))) {
            return "open";
        } else {
            return "closed";
        }
    }
}
